#!/usr/bin/env bash
set -e

TARGET_BRANCH=$1

if [ -z "$TARGET_BRANCH" ]; then
  TARGET_BRANCH=$(git for-each-ref refs/heads/ "--format=%(refname:short)" | grep \^master\$ || true)
  if [ -z "$TARGET_BRANCH" ]; then
    TARGET_BRANCH=$(git for-each-ref refs/heads/ "--format=%(refname:short)" | grep \^main\$ || true)
  fi
fi

if [ -z "$TARGET_BRANCH" ]; then
  echo "Unable to determine target branch"
  exit 1
fi

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "Looks like you are $CURRENT_BRANCH I will try and bring you back here"

echo "Resetting to the branch $TARGET_BRANCH"
git checkout $TARGET_BRANCH 
echo "a"
git reset --hard origin/$TARGET_BRANCH

echo "Pruning branches squashed merged into target branch $TARGET_BRANCH"

git checkout -q $TARGET_BRANCH || true
git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do 
  mergeBase=$(git merge-base $TARGET_BRANCH $branch) && 
    [[ $(git cherry $TARGET_BRANCH $(git commit-tree $(git rev-parse $branch\^{tree}) -p $mergeBase -m _)) == "-"* ]] && 
    git branch -D $branch && echo "Deleted Branch $branch" || true
done
echo "... Done cleaning squashed branches"
 
echo "Pruning branches merged into target branch $TARGET_BRANCH"

git checkout -q $TARGET_BRANCH || true
git branch --merged | grep -v $TARGET_BRANCH | while read branch; do
  echo "Attempting to delete branch $branch..."
  (git branch -d $branch && echo "success") || echo "FAILED!"
done
echo "... Done cleaning merged branches"

echo "Pruning remote branches (locally)"
git fetch -p
echo "... Done pruning remote branches"

echo "Resetting to $CURRENT_BRANCH"
git checkout $CURRENT_BRANCH || echo "FAILED!"
