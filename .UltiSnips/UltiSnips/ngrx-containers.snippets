global !p

def fileNamePrefix(fn, snip):
	snip.rv = re.sub('.component.ts$', '', snip.fn)

def camelizeFilePrefix(fileName, snip, uppercase_first_letter=False):
	prefix = re.sub('.component.ts$', '', snip.fn)
	ret = re.sub(r"-(\w+)", lambda m: m.group(1).title(), prefix) 

	if uppercase_first_letter:
	  ret = ret[0].upper() + ret[1:]

	snip.rv = ret
endglobal

snippet unsubscribe "Add an ngUnsubscribe"
/**
 * @private Create Subject to unsubscribe to all Observables on destroy
 */
ngUnsubscribe: Subject<void> = new Subject<void>();


/**
 * @private Unsubscribe from all Observables
 */
ngOnDestroy(): void {
  this.ngUnsubscribe.next();
  this.ngUnsubscribe.complete();
}
endsnippet

snippet selectfromstore "Select new value from the store"
/**
 * $1
 */
public $2 = this.store.select(get$0);
endsnippet

snippet boilerplate "Container Component Boilerplate"
import { Component } from '@angular/core';
import { Store } from '@ngrx/store';

import { AppState } from '@reducers/index';


@Component({
  selector: 'app-`!p fileNamePrefix(fn, snip)`-continer',
  template: \`
    <app-`!p fileNamePrefix(fn, snip)`
    >
    </app-`!p fileNamePrefix(fn, snip)`>
  \`,
})
export class `!p camelizeFilePrefix(fn, snip, True)`ContainerComponent {

  constructor(
    private store: Store<AppState>,
		$0
  ) {}
}
endsnippet
