global !p
def fileNamePrefix(fn, snip):
	snip.rv = re.sub('.effects.spec.ts$', '', snip.fn)

def humanize(str, snip):
  snip.rv = re.sub(r'([A-Z][a-z]+)', r'\1 ', str).rstrip()

def camelizeFilePrefix(fileName, snip, uppercase_first_letter=False):
	prefix = re.sub('.effects.spec.ts$', '', snip.fn)
	ret = re.sub(r"-(\w+)", lambda m: m.group(1).title(), prefix) 

	if uppercase_first_letter:
	  ret = ret[0].upper() + ret[1:]

	snip.rv = ret
endglobal

snippet describreffect "Describe block for effect"
describe('$1$', () => {
  it(\`should $2\`, () => {
    this.actions = hot('a', {
      a: new `!p camelizeFilePrefix(fn, snip, True)`Actions.$3(),
    });
    const expected = cold('b', {
      b: new $4(),
    });

    expect(
      this.effects.$1$,
    ).toBeObservable(expected);
  });
});
endsnippet

snippet iteffect "Test a effect"
it(\`should $2\`, () => {
  this.actions = hot('a', {
    a: new `!p camelizeFilePrefix(fn, snip, True)`Actions.$3(),
  });
  const expected = cold('b', {
    b: new $4(),
  });

  expect(
    this.effects.$1$,
  ).toBeObservable(expected);
});
endsnippet
