global !p
def fileNamePrefix(fn, snip):
	snip.rv = re.sub('.actions.ts$', '', snip.fn)

def humanize(str, snip):
  snip.rv = re.sub(r'([A-Z][a-z]+)', r'\1 ', str).rstrip()

def camelizeFilePrefix(fileName, snip, uppercase_first_letter=False):
	prefix = re.sub('.reducer.ts$', '', snip.fn)
	ret = re.sub(r"-(\w+)", lambda m: m.group(1).title(), prefix) 

	if uppercase_first_letter:
	  ret = ret[0].upper() + ret[1:]

	snip.rv = ret
endglobal

snippet boilerplate "Boilerplate for the ngrx Actions"
import { Action } from '@ngrx/store';
import { defineType } from '@utilities/define.type';

export const ActionTypes = {
	$1: defineType('[`!p fileNamePrefix(fn, snip)`] `!p humanize(t[1], snip)`') as '[`!p fileNamePrefix(fn, snip)`] `!p humanize(t[1], snip)`',
};

export class $1 implements Action {
	type = ActionTypes.$1;

	constructor(public payload: $0) {}
}

export type Actions = $1;
endsnippet

snippet actiontype "Create a new action type"
$1: defineType('[`!p fileNamePrefix(fn, snip)`] `!p humanize(t[1], snip)`') as '[`!p fileNamePrefix(fn, snip)`] `!p humanize(t[1], snip)`',
endsnippet

snippet action "Creates a new action"
export class $1 implements Action {
	type = ActionTypes.$1;

	constructor(public payload: $0) {}
}
endsnippet

