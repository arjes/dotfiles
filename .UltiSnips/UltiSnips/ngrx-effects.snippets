global !p

def fileNamePrefix(fn, snip):
	snip.rv = re.sub('.effects.ts$', '', snip.fn)

def camelizeFilePrefix(fileName, snip, uppercase_first_letter=False):
	prefix = re.sub('.effects.ts$', '', snip.fn)
	ret = re.sub(r"-(\w+)", lambda m: m.group(1).title(), prefix) 

	if uppercase_first_letter:
	  ret = ret[0].upper() + ret[1:]

	snip.rv = ret
endglobal

snippet boilerplate "New effect boilerplate"
import { Injectable } from '@angular/core';
import { Actions, Effect } from '@ngrx/effects';
import { Observable } from 'rxjs/Observable';
import { of } from 'rxjs/operators/of';

import * as `!p camelizeFilePrefix(fn, snip, True)`Actions from './`!p fileNamePrefix(fn, snip)`.actions';

@Injectable()
export class `!p camelizeFilePrefix(fn, snip, True)`Effects {

  /*
   * $2
   */
  @Effect()
  $1\$ = this.actions$
    .ofType(`!p camelizeFilePrefix(fn, snip, True)`Actions.ActionTypes.$3)
    .switchMap((action: `!p camelizeFilePrefix(fn, snip, True)`Actions.$3) => {
      return $0
			  .map(() => new `!p camelizeFilePrefix(fn, snip, True)`Actions.$3Success )
        .catch((err) => {
          return of(
            new `!p camelizeFilePrefix(fn, snip, True)`Actions.$3Failed(err)
          )
       })
    })

  constructor(
    private actions$: Actions,
  ) {}

}
endsnippet

snippet effect "Create new effect"
/*
 * $2
 */
@Effect()
$1\$ = this.actions$
  .ofType(`!p camelizeFilePrefix(fn, snip, True)`Actions.ActionTypes.$3)
  .switchMap((action: `!p camelizeFilePrefix(fn, snip, True)`Actions.$3) => {
    return $0
		  .map(() => new `!p camelizeFilePrefix(fn, snip, True)`Actions.$3Success() )
      .catch((err) => {
        return of(
          new `!p camelizeFilePrefix(fn, snip, True)`Actions.$3Failed(err)
        )
     })
  })
endsnippet
